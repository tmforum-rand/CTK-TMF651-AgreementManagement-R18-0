{
	"info": {
		"_postman_id": "18882b3c-46c7-4700-ba16-32de1e6c43ce",
		"name": "CTK-TMF651-AgreementManagement",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "1c28c1c3-0b3d-4be5-a468-17bbf7ec7bfe",
			"name": "TC_Agreement_N1 â€“ Create new Agreement with minimum required information",
			"item": [
				{
					"_postman_id": "960d9e4e-6bc8-424c-893e-6915783aafa6",
					"name": "Create a new agreement IDAM1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "deda4ebe-a749-4dfc-bb4b-43cdf4b01f4e",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"//Response Code 201-Created",
									"pm.test(\"Status code is 201\", function () { pm.response.to.have.status(201); });",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function(instance, index) {",
									"          ",
									"        pm.globals.set(\"IDAM1\", instance.id);",
									"        pm.globals.set(\"HREFAM1\", instance.href);",
									"        pm.globals.set(\"NAMEAM1\", instance.name);",
									"        pm.globals.set(\"TYPEAM1\", instance.type);",
									"",
									"        // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, name, type, agreementItem, engagedPartyRole]",
									"        var requiredAttributes = [ 'id', 'href', 'name', 'type', 'agreementItem', 'engagedPartyRole'];",
									"        pm.test('Instance ' +index+ ' has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"            ",
									"        pm.test(\"Location on header matches expected\", function (){",
									"            pm.expect(pm.response.headers.get(\"Location\")).to.equal(request.url + \"/\" +pm.globals.get(\"IDAM1\"));",
									"        });    ",
									"            ",
									"        // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"        pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"        ",
									"        //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"        if (instance.id == pm.globals.get(\"IDAM1\")){",
									"            pm.test('id equal Post', function(){",
									"                pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM1\"));",
									"            });",
									"               ",
									"            pm.test('href equal Post', function(){",
									"               pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM1\"));",
									"            });",
									"               ",
									"            pm.test('type equal Post', function(){",
									"               pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM1\"));",
									"            });",
									"               ",
									"            pm.test('name equal Post', function(){",
									"               pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM1\"));",
									"            });",
									"        }",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"        ",
									"    pm.globals.set(\"IDAM1\", instance.id);",
									"    pm.globals.set(\"HREFAM1\", instance.href);",
									"    pm.globals.set(\"NAMEAM1\", instance.name);",
									"    pm.globals.set(\"TYPEAM1\", instance.type);",
									"",
									"    // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, name, type, agreementItem, engagedPartyRole]",
									"    var requiredAttributes = [ 'id', 'href', 'name', 'type', 'agreementItem', 'engagedPartyRole'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"    // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"    pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"    pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"    ",
									"    //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"    if (instance.id == pm.globals.get(\"IDAM1\")){",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM1\"));",
									"        });",
									"           ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM1\"));",
									"        });",
									"           ",
									"        pm.test('type equal Post', function(){",
									"           pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM1\"));",
									"        });",
									"           ",
									"        pm.test('name equal Post', function(){",
									"           pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM1\"));",
									"        });",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"<anytext>\",\r\n\t\"type\": \"throughput\",\r\n\t\"agreementItem\": [],\r\n\t\"engagedPartyRole\": []\r\n}"
						},
						"url": {
							"raw": "{{AgreementManagementAPI}}/agreement",
							"host": [
								"{{AgreementManagementAPI}}"
							],
							"path": [
								"agreement"
							]
						},
						"description": "Server returns 4xx error when Product creation request is missing mandatory information"
					},
					"response": []
				},
				{
					"_postman_id": "ae63e187-df55-4fed-a4dc-52928973fd08",
					"name": "Get all Agreement and check if new IDAM1 is created",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5cc9f19f-8132-4c03-95be-c1e7e9a580d2",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"//Response Code 200-Ok",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function(instance, index) {",
									"      ",
									"        // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, type, name, engagedPartyRole, agreementItem]",
									"        var requiredAttributes = [ 'id', 'href', 'type', 'name', 'engagedPartyRole', 'agreementItem'];",
									"        pm.test('Instance ' +index+ ' has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"        // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"        pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"        ",
									"        //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"        if (instance.id == pm.globals.get(\"IDAM1\")){",
									"            pm.test('id equal Post', function(){",
									"                pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM1\"));",
									"            });",
									"               ",
									"            pm.test('href equal Post', function(){",
									"               pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM1\"));",
									"            });",
									"               ",
									"            pm.test('type equal Post', function(){",
									"               pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM1\"));",
									"            });",
									"               ",
									"            pm.test('name equal Post', function(){",
									"               pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM1\"));",
									"            });",
									"        }",
									"    });",
									"}",
									"",
									"else {",
									"    ",
									"    var instance = pm.response.json();",
									"",
									"    // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, type, name, engagedPartyRole, agreementItem]",
									"    var requiredAttributes = [ 'id', 'href', 'type', 'name', 'engagedPartyRole', 'agreementItem'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"    // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"    pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"    pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"    ",
									"    //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"    if (instance.id == pm.globals.get(\"IDAM1\")){",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM1\"));",
									"        });",
									"           ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM1\"));",
									"        });",
									"           ",
									"        pm.test('type equal Post', function(){",
									"           pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM1\"));",
									"        });",
									"           ",
									"        pm.test('name equal Post', function(){",
									"           pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM1\"));",
									"        });",
									"    }",
									"}",
									"",
									"pm.test(\"IDAM1 is in the body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDAM1\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{AgreementManagementAPI}}/agreement",
							"host": [
								"{{AgreementManagementAPI}}"
							],
							"path": [
								"agreement"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "e8cb71ce-c5e3-49bf-8885-6deb5676b32b",
					"name": "/agreement/{IDAM1}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cf8aef6-ab02-4328-ada7-976a60c56be2",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"//Response Code 200-Created",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function(instance, index) {",
									"      ",
									"        // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, type, name, engagedPartyRole, agreementItem]",
									"        var requiredAttributes = [ 'id', 'href', 'type', 'name', 'engagedPartyRole', 'agreementItem'];",
									"        pm.test('Instance ' +index+ ' has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"        // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"        pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"        ",
									"        //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"        if (instance.id == pm.globals.get(\"IDAM1\")){",
									"            pm.test('id equal Post', function(){",
									"                pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM1\"));",
									"            });",
									"               ",
									"            pm.test('href equal Post', function(){",
									"               pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM1\"));",
									"            });",
									"               ",
									"            pm.test('type equal Post', function(){",
									"               pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM1\"));",
									"            });",
									"               ",
									"            pm.test('name equal Post', function(){",
									"               pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM1\"));",
									"            });",
									"        }",
									"    });",
									"}",
									"",
									"else {",
									"    ",
									"    var instance = pm.response.json();",
									"",
									"    // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, type, name, engagedPartyRole, agreementItem]",
									"    var requiredAttributes = [ 'id', 'href', 'type', 'name', 'engagedPartyRole', 'agreementItem'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"    // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"    pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"    pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"    ",
									"    //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"    if (instance.id == pm.globals.get(\"IDAM1\")){",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM1\"));",
									"        });",
									"           ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM1\"));",
									"        });",
									"           ",
									"        pm.test('type equal Post', function(){",
									"           pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM1\"));",
									"        });",
									"           ",
									"        pm.test('name equal Post', function(){",
									"           pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM1\"));",
									"        });",
									"    }",
									"}",
									"",
									"pm.test(\"IDAM1 is in the body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDAM1\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{AgreementManagementAPI}}/agreement/{{IDAM1}}",
							"host": [
								"{{AgreementManagementAPI}}"
							],
							"path": [
								"agreement",
								"{{IDAM1}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "A new product will be created with minimal required information, API returns success code (200)"
		},
		{
			"_postman_id": "4c1a9913-d748-4997-820e-6c5949c099d2",
			"name": "TC_Agreement_N2 â€“ Create new Agreement with minimum set of parameters supported by server",
			"item": [
				{
					"_postman_id": "a4ac3cbd-3771-42e5-ac00-eecd5b877604",
					"name": "/agreement - Create a new",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "546389f7-2c92-498a-8873-278ec36f0f98",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"//Response Code 201-Created",
									"pm.test(\"Status code is 201\", function () { pm.response.to.have.status(201); });",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function(instance, index) {",
									"          ",
									"        pm.globals.set(\"IDAM2\", instance.id);",
									"        pm.globals.set(\"HREFAM2\", instance.href);",
									"        pm.globals.set(\"NAMEAM2\", instance.name);",
									"        pm.globals.set(\"TYPEAM2\", instance.type);",
									"",
									"        // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, name, type, agreementItem, engagedPartyRole]",
									"        var requiredAttributes = [ 'id', 'href', 'name', 'type', 'agreementItem', 'engagedPartyRole'];",
									"        pm.test('Instance ' +index+ ' has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"            ",
									"        // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"        pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"        ",
									"        //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"        if (instance.id == pm.globals.get(\"IDAM2\")){",
									"            pm.test('id equal Post', function(){",
									"                pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM2\"));",
									"            });",
									"               ",
									"            pm.test('href equal Post', function(){",
									"               pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM2\"));",
									"            });",
									"               ",
									"            pm.test('type equal Post', function(){",
									"               pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM2\"));",
									"            });",
									"               ",
									"            pm.test('name equal Post', function(){",
									"               pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM2\"));",
									"            });",
									"        }",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"        ",
									"    pm.globals.set(\"IDAM2\", instance.id);",
									"    pm.globals.set(\"HREFAM2\", instance.href);",
									"    pm.globals.set(\"NAMEAM2\", instance.name);",
									"    pm.globals.set(\"TYPEAM2\", instance.type);",
									"        ",
									"    // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, name, type, agreementItem, engagedPartyRole]",
									"    var requiredAttributes = [ 'id', 'href', 'name', 'type', 'agreementItem', 'engagedPartyRole'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"    ",
									"    // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"    pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"    pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"    ",
									"    //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"    if (instance.id == pm.globals.get(\"IDAM2\")){",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM2\"));",
									"        });",
									"           ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM2\"));",
									"        });",
									"           ",
									"        pm.test('type equal Post', function(){",
									"           pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM2\"));",
									"        });",
									"           ",
									"        pm.test('name equal Post', function(){",
									"           pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM2\"));",
									"        });",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"nanana\",\r\n\t\"characteristic\": [\r\n\t\t{\r\n\t\t\t\"name\": \"foo.\", \"value\": \"bar\"\r\n\t\t}\r\n\t] ,\r\n\t\"type\": \"loan\",\r\n\t\"agreementItem\": [],\r\n\t\"engagedPartyRole\": []\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{AgreementManagementAPI}}/agreement",
							"host": [
								"{{AgreementManagementAPI}}"
							],
							"path": [
								"agreement"
							]
						},
						"description": "Server returns 4xx error when Product creation request is missing mandatory information"
					},
					"response": []
				},
				{
					"_postman_id": "39d25537-3d18-4ced-8c9c-70a7e44d278a",
					"name": "Get all Agreement and check if new IDAM2 is created",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18662442-5cd3-4dd5-b8b2-3b25df6531e0",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"//Response Code 200-Ok",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function(instance, index) {",
									"      ",
									"        // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, type, name, engagedPartyRole, agreementItem]",
									"        var requiredAttributes = [ 'id', 'href', 'type', 'name', 'engagedPartyRole', 'agreementItem'];",
									"        pm.test('Instance ' +index+ ' has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"        // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"        pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"        ",
									"        //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"        if (instance.id == pm.globals.get(\"IDAM2\")){",
									"            pm.test('id equal Post', function(){",
									"                pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM2\"));",
									"            });",
									"               ",
									"            pm.test('href equal Post', function(){",
									"               pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM2\"));",
									"            });",
									"               ",
									"            pm.test('type equal Post', function(){",
									"               pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM2\"));",
									"            });",
									"               ",
									"            pm.test('name equal Post', function(){",
									"               pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM2\"));",
									"            });",
									"        }",
									"    });",
									"}",
									"",
									"else {",
									"    ",
									"    var instance = pm.response.json();",
									"",
									"    // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, type, name, engagedPartyRole, agreementItem]",
									"    var requiredAttributes = [ 'id', 'href', 'type', 'name', 'engagedPartyRole', 'agreementItem'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"    // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"    pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"    pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"    ",
									"    //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"    if (instance.id == pm.globals.get(\"IDAM2\")){",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM2\"));",
									"        });",
									"           ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM2\"));",
									"        });",
									"           ",
									"        pm.test('type equal Post', function(){",
									"           pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM2\"));",
									"        });",
									"           ",
									"        pm.test('name equal Post', function(){",
									"           pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM2\"));",
									"        });",
									"    }",
									"}",
									"",
									"pm.test(\"IDAM2 is in the body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDAM2\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{AgreementManagementAPI}}/agreement",
							"host": [
								"{{AgreementManagementAPI}}"
							],
							"path": [
								"agreement"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "8d6e25bb-2d31-4dfe-97c9-646f78a61847",
					"name": "/agreement/{IDAM2}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3457461d-7577-4849-ae34-030ebb64b64e",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"//Response Code 200-Created",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function(instance, index) {",
									"      ",
									"        // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, type, name, engagedPartyRole, agreementItem]",
									"        var requiredAttributes = [ 'id', 'href', 'type', 'name', 'engagedPartyRole', 'agreementItem'];",
									"        pm.test('Instance ' +index+ ' has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"        // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"        pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"        ",
									"        //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"        if (instance.id == pm.globals.get(\"IDAM2\")){",
									"            pm.test('id equal Post', function(){",
									"                pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM2\"));",
									"            });",
									"               ",
									"            pm.test('href equal Post', function(){",
									"               pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM2\"));",
									"            });",
									"               ",
									"            pm.test('type equal Post', function(){",
									"               pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM2\"));",
									"            });",
									"               ",
									"            pm.test('name equal Post', function(){",
									"               pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM2\"));",
									"            });",
									"        }",
									"    });",
									"}",
									"",
									"else {",
									"    ",
									"    var instance = pm.response.json();",
									"",
									"    // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, type, name, engagedPartyRole, agreementItem]",
									"    var requiredAttributes = [ 'id', 'href', 'type', 'name', 'engagedPartyRole', 'agreementItem'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"    // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"    pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"    pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"    ",
									"    //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"    if (instance.id == pm.globals.get(\"IDAM2\")){",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM2\"));",
									"        });",
									"           ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM2\"));",
									"        });",
									"           ",
									"        pm.test('type equal Post', function(){",
									"           pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM2\"));",
									"        });",
									"           ",
									"        pm.test('name equal Post', function(){",
									"           pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM2\"));",
									"        });",
									"    }",
									"}",
									"",
									"pm.test(\"IDAM2 is in the body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDAM2\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{AgreementManagementAPI}}/agreement/{{IDAM2}}",
							"host": [
								"{{AgreementManagementAPI}}"
							],
							"path": [
								"agreement",
								"{{IDAM2}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Patch an existing Product. Server returns success (200)"
		},
		{
			"_postman_id": "a256f031-dfa4-45a1-9e20-62670fc93ece",
			"name": "TC_Agreement_N3 â€“ Search for Agreements with specific characteristics",
			"item": [
				{
					"_postman_id": "da3058ca-0588-48ff-a864-568045cb37eb",
					"name": "Get all Agreement and test if it has IDAM1, IDAM2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11139884-3823-4795-923a-e0717526bb82",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"//Response Code 200-Ok",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function(instance, index) {",
									"      ",
									"        // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, type, name, engagedPartyRole, agreementItem]",
									"        var requiredAttributes = [ 'id', 'href', 'type', 'name', 'engagedPartyRole', 'agreementItem'];",
									"        pm.test('Instance ' +index+ ' has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"        // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"        pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"        ",
									"        //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"        if (instance.id == pm.globals.get(\"IDAM1\")){",
									"            pm.test('id equal Post', function(){",
									"                pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM1\"));",
									"            });",
									"               ",
									"            pm.test('href equal Post', function(){",
									"               pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM1\"));",
									"            });",
									"               ",
									"            pm.test('type equal Post', function(){",
									"               pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM1\"));",
									"            });",
									"               ",
									"            pm.test('name equal Post', function(){",
									"               pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM1\"));",
									"            });",
									"        }",
									"        ",
									"        //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"        if (instance.id == pm.globals.get(\"IDAM2\")){",
									"            pm.test('id equal Post', function(){",
									"                pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM2\"));",
									"            });",
									"               ",
									"            pm.test('href equal Post', function(){",
									"               pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM2\"));",
									"            });",
									"               ",
									"            pm.test('type equal Post', function(){",
									"               pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM2\"));",
									"            });",
									"               ",
									"            pm.test('name equal Post', function(){",
									"               pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM2\"));",
									"            });",
									"        }",
									"    });",
									"}",
									"",
									"else {",
									"    ",
									"    var instance = pm.response.json();",
									"",
									"    // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, type, name, engagedPartyRole, agreementItem]",
									"    var requiredAttributes = [ 'id', 'href', 'type', 'name', 'engagedPartyRole', 'agreementItem'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"    // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"    pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"    pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"    ",
									"    //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"    if (instance.id == pm.globals.get(\"IDAM1\")){",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM1\"));",
									"        });",
									"           ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM1\"));",
									"        });",
									"           ",
									"        pm.test('type equal Post', function(){",
									"           pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM1\"));",
									"        });",
									"           ",
									"        pm.test('name equal Post', function(){",
									"           pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM1\"));",
									"        });",
									"    }",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDAM2\")){",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM2\"));",
									"        });",
									"           ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM2\"));",
									"        });",
									"           ",
									"        pm.test('type equal Post', function(){",
									"           pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM2\"));",
									"        });",
									"           ",
									"        pm.test('name equal Post', function(){",
									"           pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM2\"));",
									"        });",
									"    }",
									"}",
									"",
									"pm.test(\"IDAM1 is in the body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDAM1\"));",
									"});",
									"",
									"pm.test(\"IDAM2 is on the body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDAM2\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"sdfsdf\",\r\n    \"description\": \"sdfsdf\",\r\n    \"isBundle\": false,\r\n    \"lifecycleStatus\": \"Active\",\r\n    \"validFor\":\r\n    {\r\n        \"startDateTime\": \"2020-01-20T00:00:00.000+0000\",\r\n        \"endDateTime\": \"2050-01-20T00:00:00.000+0000\"\r\n    },\r\n    \"productSpecification\":\r\n     {\r\n        \"id\": \"11\",\r\n        \"name\": \"Product11\"\r\n    },\r\n    \"version\": \"2.0\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{AgreementManagementAPI}}/agreement",
							"host": [
								"{{AgreementManagementAPI}}"
							],
							"path": [
								"agreement"
							]
						},
						"description": "Retrieve only the Product descriptions field"
					},
					"response": []
				},
				{
					"_postman_id": "0569f6b0-f2cc-4a4c-b850-0e3489494f91",
					"name": "Filtered by specific attribute 'type=throughput '",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9c15d5c-466c-4a35-a41e-0c65b2d69ec4",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"//Response Code 200-Created",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function(instance, index) {",
									"      ",
									"        // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, type, name, engagedPartyRole, agreementItem]",
									"        var requiredAttributes = [ 'id', 'href', 'type', 'name', 'engagedPartyRole', 'agreementItem'];",
									"        pm.test('Instance ' +index+ ' has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"        // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"        pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"        pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"        ",
									"        //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"        if (instance.id == pm.globals.get(\"IDAM1\")){",
									"            pm.test('id equal Post', function(){",
									"                pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM1\"));",
									"            });",
									"               ",
									"            pm.test('href equal Post', function(){",
									"               pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM1\"));",
									"            });",
									"               ",
									"            pm.test('type equal Post', function(){",
									"               pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM1\"));",
									"            });",
									"               ",
									"            pm.test('name equal Post', function(){",
									"               pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM1\"));",
									"            });",
									"        }",
									"        ",
									"        if (instance.id == pm.globals.get(\"IDAM2\")){",
									"            pm.test('ID: ' + pm.globals.get(\"IDAM2\") + ' should not be returned by this search', function(){",
									"                pm.expect(1).to.equal(0);",
									"            });",
									"        }",
									"    });",
									"}",
									"",
									"else {",
									"    ",
									"    var instance = pm.response.json();",
									"",
									"    // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [id, href, type, name, engagedPartyRole, agreementItem]",
									"    var requiredAttributes = [ 'id', 'href', 'type', 'name', 'engagedPartyRole', 'agreementItem'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"    // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"    pm.test('Response has id attribute', function() { pm.expect(instance.id).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance.href).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"    pm.test('Response has agreementItem attribute', function() { pm.expect(instance.agreementItem).to.be.a('array'); });",
									"    pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance.engagedPartyRole).to.be.a('array'); });",
									"    ",
									"    //Note: not testing 'agreementItem' nor 'engagedPartyRole' as they are currently empty Arrays ",
									"    if (instance.id == pm.globals.get(\"IDAM1\")){",
									"        pm.test('id equal Post', function(){",
									"            pm.expect(instance.id).to.eql(pm.globals.get(\"IDAM1\"));",
									"        });",
									"           ",
									"        pm.test('href equal Post', function(){",
									"           pm.expect(instance.href).to.eql(pm.globals.get(\"HREFAM1\"));",
									"        });",
									"           ",
									"        pm.test('type equal Post', function(){",
									"           pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM1\"));",
									"        });",
									"           ",
									"        pm.test('name equal Post', function(){",
									"           pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM1\"));",
									"        });",
									"    }",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDAM2\")){",
									"        pm.test('ID: ' + pm.globals.get(\"IDAM2\") + ' should not be returned by this search', function(){",
									"            pm.expect(1).to.equal(0);",
									"        });",
									"    }",
									"}",
									"",
									"pm.test(\"IDAM1 is in the body\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"IDAM1\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{AgreementManagementAPI}}/agreement?type=throughput",
							"host": [
								"{{AgreementManagementAPI}}"
							],
							"path": [
								"agreement"
							],
							"query": [
								{
									"key": "type",
									"value": "throughput"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Return the Product objects that satisfy the supplied search criteria"
		},
		{
			"_postman_id": "fc3a41d3-2295-4643-a8c3-9a34364792e7",
			"name": "TC_Agreement_N4 - N4 â€“ Filtered retrieval of Agreements",
			"item": [
				{
					"_postman_id": "e7597987-bac8-40ab-b9fa-809ce47c96a1",
					"name": "Filtered by specific attribute 'type' Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb90f6d1-4589-417d-9659-6a23d30968e0",
								"type": "text/javascript",
								"exec": [
									"// See: https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox_api_reference",
									"",
									"pm.test('Content-Type is present', function() { pm.response.to.have.header('Content-Type') });",
									"pm.test('Content-Type is application/json', function() { pm.response.headers.has('application/json') });",
									"//Response Code 200-Created",
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function(instance, index) {",
									"      ",
									"        // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [type, name]",
									"        var requiredAttributes = [ 'type', 'name'];",
									"        pm.test('Instance ' +index+ ' has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"        // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"        pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"        pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"        ",
									"        pm.test('Only name, type on body', function(){",
									"            pm.expect(Object.keys(instance).length).to.eql(requiredAttributes.length);",
									"        });",
									"        ",
									"        if (instance.id == pm.globals.get(\"IDAM1\")){",
									"            pm.test('type equal Post', function(){",
									"               pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM1\"));",
									"            });",
									"               ",
									"            pm.test('name equal Post', function(){",
									"               pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM1\"));",
									"            });",
									"        }",
									"        ",
									"        if (instance.id == pm.globals.get(\"IDAM2\")){",
									"            pm.test('ID: ' + pm.globals.get(\"IDAM2\") + ' should not be returned by this search', function(){",
									"                pm.expect(1).to.equal(0);",
									"            });",
									"        }",
									"    });",
									"}",
									"",
									"else {",
									"    ",
									"    var instance = pm.response.json();",
									"",
									"    // Mandatory attributes listed in \"definitions.ApointmentManagement.required\" are [type, name]",
									"        var requiredAttributes = [ 'type', 'name'];",
									"    pm.test('Instance has all mandatory attributes', function() { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) } );",
									"        ",
									"    // Checking all remaining possible attributes for ApointmentManagement, taken from the Swagger file",
									"    pm.test('Response has name attribute', function() { pm.expect(instance.name).to.be.a('string'); });",
									"    pm.test('Response has type attribute', function() { pm.expect(instance.type).to.be.a('string'); });",
									"    ",
									"    pm.test('Only name, type on body', function(){",
									"        pm.expect(Object.keys(instance).length).to.eql(requiredAttributes.length);",
									"    });",
									"        ",
									"    if (instance.id == pm.globals.get(\"IDAM1\")){",
									"        pm.test('type equal Post', function(){",
									"           pm.expect(instance.type).to.eql(pm.globals.get(\"TYPEAM1\"));",
									"        });",
									"           ",
									"        pm.test('name equal Post', function(){",
									"           pm.expect(instance.name).to.eql(pm.globals.get(\"NAMEAM1\"));",
									"        });",
									"    }",
									"    ",
									"    if (instance.id == pm.globals.get(\"IDAM2\")){",
									"        pm.test('ID: ' + pm.globals.get(\"IDAM2\") + ' should not be returned by this search', function(){",
									"            pm.expect(1).to.equal(0);",
									"        });",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{AgreementManagementAPI}}/agreement/{{IDAM1}}?fields=name,type",
							"host": [
								"{{AgreementManagementAPI}}"
							],
							"path": [
								"agreement",
								"{{IDAM1}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "name,type"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Retrieve only those products that satisfy the supplied filter criteria"
		},
		{
			"_postman_id": "64446c82-43fe-4d67-a4dd-d096efa8f69e",
			"name": "TC_Agreement_E1 - Unknown Agreement Identifier",
			"item": [
				{
					"_postman_id": "14c482b4-5073-48c7-bc14-cba4ef6c33ad",
					"name": "/appointment/{unknown}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6eeb273f-30cd-4381-9fb1-9a43b58cbbd7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"sdfsdf\",\r\n    \"description\": \"sdfsdf\",\r\n    \"isBundle\": false,\r\n    \"lifecycleStatus\": \"Active\",\r\n    \"validFor\":\r\n    {\r\n        \"startDateTime\": \"2020-01-20T00:00:00.000+0000\",\r\n        \"endDateTime\": \"2050-01-20T00:00:00.000+0000\"\r\n    },\r\n    \"productSpecification\":\r\n     {\r\n        \"id\": \"11\",\r\n        \"name\": \"Product11\"\r\n    },\r\n    \"version\": \"2.0\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{AgreementManagementAPI}}/agreement/465498213",
							"host": [
								"{{AgreementManagementAPI}}"
							],
							"path": [
								"agreement",
								"465498213"
							]
						},
						"description": "retrieve Product with unknown id"
					},
					"response": []
				}
			],
			"description": "The API should return a 404 in the event it is invoked with a product ID that is not recognised"
		},
		{
			"_postman_id": "6f82d725-ecbb-4ff9-864f-2ea80e7d53e3",
			"name": "TC_Agreement_E2 - Invalid request - Missing mandatory Parameter",
			"item": [
				{
					"_postman_id": "ef0b3c8f-7fe6-4b77-8119-0d43acc77e75",
					"name": "TC_E2_Post with missing mandatory parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bc636aa-55c6-4a87-b28d-f460bb1c6afa",
								"type": "text/javascript",
								"exec": [
									"//Notice that this request is missing a type but any other mandatory parameter could be used.",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"<anytext>\",\r\n\t\"agreementItem\": [],\r\n\t\"engagedPartyRole\": []\r\n}"
						},
						"url": {
							"raw": "{{AgreementManagementAPI}}/agreement",
							"host": [
								"{{AgreementManagementAPI}}"
							],
							"path": [
								"agreement"
							]
						},
						"description": "Server returns 4xx error when Product creation request is missing mandatory information"
					},
					"response": []
				}
			],
			"description": "The Product creation request has failed due to missing parameter(s)"
		},
		{
			"_postman_id": "c748f90f-be89-4f0a-84da-27d23eb3e33e",
			"name": "TC_Agreement_E3 - Invalid request - Missing parameter mandatory in context",
			"item": [
				{
					"_postman_id": "68831b42-299a-42cc-aad8-f770727d02d0",
					"name": "TC_E3_Post with missing mandatory parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bc636aa-55c6-4a87-b28d-f460bb1c6afa",
								"type": "text/javascript",
								"exec": [
									"//Notice that this request is missing a type but any other mandatory parameter could be used.",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"some name\",\r\n\t\"characteristic\":\r\n\t\t{\r\n\t\t\t\"value\": \"coco\"\r\n\t\t}\r\n}"
						},
						"url": {
							"raw": "{{AgreementManagementAPI}}/agreement",
							"host": [
								"{{AgreementManagementAPI}}"
							],
							"path": [
								"agreement"
							]
						},
						"description": "Server returns 4xx error when Product creation request is missing mandatory information"
					},
					"response": []
				}
			],
			"description": "The Product creation request has failed due to missing parameter(s)"
		}
	]
}